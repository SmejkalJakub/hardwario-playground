language: node_js

node_js:
  - "8"

os:
  - linux
  - osx

env:
  matrix:
  - BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8"
  - BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8" ARCH="x86"

matrix:
  exclude:
  - os: osx
    env: BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8" ARCH="x86"

before_install:
  # download node if testing x86 architecture
  - nvm install $TRAVIS_NODE_VERSION
  - >
    if [[ "$ARCH" == "x86" ]]; then
      BASE_URL=$(node -p "'https://nodejs.org/dist/' + process.version");
      X86_FILE=$(node -p "'node-' + process.version + '-' + process.platform + '-x86'");
      wget $BASE_URL/$X86_FILE.tar.gz;
      tar -xf $X86_FILE.tar.gz;
      nvm deactivate;
      export PATH=`pwd`/$X86_FILE/bin:$PATH;
    fi;

  - if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
  - node --version
  - node -p 'process.platform + "@" + process.arch'
  - npm --version
  - npm install node-pre-gyp -g
  - npm install electron-builder -g

install:
  - npm install

script:
  - >
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      if [[ "$ARCH" == "x86" ]]; then
        npm run package-linux32;
      else
        npm run package-linux64;
        npm run package-linux-appimage;
      fi

      cp release/*.deb .
      rename -v "s/linux/ubuntu/" *.deb
      mv *.deb release

      cp release/*.tar.gz .
      rename -v "s/linux/ubuntu/" *.tar.gz
      mv *.tar.gz release

      if [[ "$ARCH" == "x64" ]]; then
        cp release/*.AppImage .
        rename -v "s/linux/ubuntu/" *.AppImage
        mv *.AppImage release
      fi
    fi

  - >
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      npm run package-mac;
    fi

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - g++-4.8-multilib
      - gcc-multilib
      - libzmq-dev
      - libzmq-dev:i386
      - libkrb5-dev
      - bc
      - bsdtar
      - zlib1g:i386

cache:
  directories:
    - node_modules
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder

deploy:
  provider: releases
  file:
    - release/*.deb
    - release/*.AppImage
    - release/*.dmg
    - release/*.tar.gz
  file_glob: true
  skip_cleanup: true
  api_key: ${GITHUB_KEY}
  on:
    tags: true
